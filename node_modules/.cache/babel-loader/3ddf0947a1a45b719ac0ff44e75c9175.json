{"ast":null,"code":"var _jsxFileName = \"/Users/beet/code/udemy/food-order-app/src/components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport classes from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMealsHandler = async () => {\n    // have a set is loading\n    setIsLoading(true);\n    setError(null); // has an error set\n\n    try {\n      const response = await fetch(\"https://react-http-7b544-default-rtdb.asia-southeast1.firebasedatabase.app/meals\");\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const data = await response.json();\n      const loadedMeals = [];\n\n      for (const key in data) {\n        loadedMeals.push({\n          id: key,\n          name: data[key].name,\n          description: data[key].description,\n          price: data[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      console.log(error.message); // This error message isn't saving to the setError ---\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchMealsHandler();\n  }, []);\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this));\n\n  let content = /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no meals found...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 17\n  }, this);\n\n  if (mealsList.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(Card, {\n      children: !isLoading ? mealsList : message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    let content = /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (error) {\n    message = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.MealsLoading,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }, this);\n  } // const message = error ? <p className={classes.MealsLoading}>{error}</p> : <p>loading...</p>\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"Iiz9r13wHP3oUKY8Pc8nCUik7ZA=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/beet/code/udemy/food-order-app/src/components/Meals/AvailableMeals.js"],"names":["useState","useEffect","useCallback","classes","Card","MealItem","AvailableMeals","meals","setMeals","isLoading","setIsLoading","error","setError","fetchMealsHandler","response","fetch","ok","Error","data","json","loadedMeals","key","push","id","name","description","price","message","console","log","mealsList","map","meal","content","length","MealsLoading"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMa,iBAAiB,GAAG,YAAY;AACpC;AACAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR,CAHoC,CAIpC;;AAEA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kFAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEF,GADW;AAEfG,UAAAA,IAAI,EAAEN,IAAI,CAACG,GAAD,CAAJ,CAAUG,IAFD;AAGfC,UAAAA,WAAW,EAAEP,IAAI,CAACG,GAAD,CAAJ,CAAUI,WAHR;AAIfC,UAAAA,KAAK,EAAER,IAAI,CAACG,GAAD,CAAJ,CAAUK;AAJF,SAAjB;AAMD;;AAEDlB,MAAAA,QAAQ,CAACY,WAAD,CAAR;AACD,KAvBD,CAuBE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACgB,OAAP,CAAR;AACAjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAK,CAACgB,OAAlB,EAHc,CAId;AACD;;AACDjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GApCD;;AAsCAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMiB,SAAS,GAAGvB,KAAK,CAACwB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACT,EADX;AAGE,IAAA,IAAI,EAAES,IAAI,CAACR,IAHb;AAIE,IAAA,WAAW,EAAEQ,IAAI,CAACP,WAJpB;AAKE,IAAA,KAAK,EAAEO,IAAI,CAACN;AALd,KAEOM,IAAI,CAACT,EAFZ;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;;AAUA,MAAIU,OAAO,gBAAG,QAAC,IAAD;AAAA,2BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAIH,SAAS,CAACI,MAAV,GAAmB,CAAvB,EAA0B;AACxBD,IAAAA,OAAO,gBAAG,QAAC,IAAD;AAAA,gBAAO,CAACxB,SAAD,GAAaqB,SAAb,GAAyBH;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,MAAIhB,KAAJ,EAAW;AACTsB,IAAAA,OAAO,gBAAG,QAAC,IAAD;AAAA,6BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,MAAIxB,SAAJ,EAAe;AACb,QAAIwB,OAAO,gBAAG,QAAC,IAAD;AAAA,6BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAd;AACD;;AAGD,MAAItB,KAAJ,EAAW;AACTgB,IAAAA,OAAO,gBAAG;AAAG,MAAA,SAAS,EAAExB,OAAO,CAACgC,YAAtB;AAAA,gBAAqCxB;AAArC;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GA1E0B,CA4E3B;;;AAEA,sBACE;AAAS,IAAA,SAAS,EAAER,OAAO,CAACI,KAA5B;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CArFD;;GAAMD,c;;KAAAA,c;AAuFN,eAAeA,cAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport classes from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\n\nconst AvailableMeals = () => {\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMealsHandler = async () => {\n    // have a set is loading\n    setIsLoading(true);\n    setError(null);\n    // has an error set\n\n    try {\n      const response = await fetch(\n        \"https://react-http-7b544-default-rtdb.asia-southeast1.firebasedatabase.app/meals\"\n      );\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const data = await response.json();\n\n      const loadedMeals = [];\n\n      for (const key in data) {\n        loadedMeals.push({\n          id: key,\n          name: data[key].name,\n          description: data[key].description,\n          price: data[key].price,\n        });\n      }\n\n      setMeals(loadedMeals);\n    } catch (error) {\n      setError(error.message)\n      setIsLoading(false)\n      console.log(error.message)\n      // This error message isn't saving to the setError ---\n    }\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    fetchMealsHandler();\n  }, []);\n\n  const mealsList = meals.map((meal) => (\n    <MealItem\n      id={meal.id}\n      key={meal.id}\n      name={meal.name}\n      description={meal.description}\n      price={meal.price}\n    />\n  ));\n\n  let content = <Card><p>no meals found...</p></Card>\n\n  if (mealsList.length > 0) {\n    content = <Card>{!isLoading ? mealsList : message}</Card>\n  }\n\n  if (error) {\n    content = <Card><p>error</p></Card>\n  }\n\n  if (isLoading) {\n    let content = <Card><p>loading...</p></Card>\n  }\n  \n\n  if (error) {\n    message = <p className={classes.MealsLoading}>{error}</p>\n  }\n\n  // const message = error ? <p className={classes.MealsLoading}>{error}</p> : <p>loading...</p>\n\n  return (\n    <section className={classes.meals}>\n      <ul>\n        \n      </ul>\n    </section>\n  );\n};\n\nexport default AvailableMeals;\n"]},"metadata":{},"sourceType":"module"}