{"ast":null,"code":"var _jsxFileName = \"/Users/beet/code/udemy/food-order-app/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    console.log('submitted!');\n\n    if (!formIsValid) {\n      return;\n    }\n\n    console.log('form is valid!'); // http request to firebase\n\n    props.onCancel();\n  };\n\n  const isValidValue = value => value.trim() !== '';\n\n  const {\n    value: nameValue,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(isValidValue);\n  const {\n    value: addressValue,\n    hasError: addressHasError,\n    isValid: addressIsValid,\n    valueChangeHandler: addressChangeHandler,\n    inputBlurHandler: addressBlurHandler\n  } = useInput(isValidValue);\n  const {\n    value: cityValue,\n    hasError: cityHasError,\n    isValid: cityIsValid,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler\n  } = useInput(isValidValue);\n  const {\n    value: postcodeValue,\n    hasError: postcodeHasError,\n    isValid: postcodeIsValid,\n    valueChangeHandler: postcodeChangeHandler,\n    inputBlurHandler: postcodeBlurHandler\n  } = useInput(isValidValue); //write a custom input to check validation\n  // form is valid\n\n  let formIsValid = false;\n\n  if (nameIsValid && addressIsValid && cityIsValid && postcodeIsValid) {\n    formIsValid = true;\n  } // submit form handler\n\n\n  const nameInputClass = nameHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const addressInputClass = addressHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const cityInputClass = cityHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const postcodeInputClass = postcodeHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: nameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.invalidMessage,\n        children: \"must have a name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: addressInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"address\",\n        onChange: addressChangeHandler,\n        onBlur: addressBlurHandler,\n        value: addressValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), addressHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.invalidMessage,\n        children: \"must have a valid city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityChangeHandler,\n        onBlur: cityBlurHandler,\n        value: cityValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), cityHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.invalidMessage,\n        children: \"must have a valid city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postcodeInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postcode\",\n        children: \"Post Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postcode\",\n        onChange: postcodeChangeHandler,\n        onBlur: postcodeBlurHandler,\n        value: postcodeValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), postcodeHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.invalidMessage,\n        children: \"must have a valid city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        type: \"submit\",\n        disabled: !formIsValid,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"BtG7v6WARFpG9uikpTyg3nQ0sUA=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/beet/code/udemy/food-order-app/src/components/Cart/Checkout.js"],"names":["classes","useInput","Checkout","props","confirmHandler","event","preventDefault","console","log","formIsValid","onCancel","isValidValue","value","trim","nameValue","hasError","nameHasError","isValid","nameIsValid","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","addressValue","addressHasError","addressIsValid","addressChangeHandler","addressBlurHandler","cityValue","cityHasError","cityIsValid","cityChangeHandler","cityBlurHandler","postcodeValue","postcodeHasError","postcodeIsValid","postcodeChangeHandler","postcodeBlurHandler","nameInputClass","control","invalid","addressInputClass","cityInputClass","postcodeInputClass","invalidMessage","actions","submit"],"mappings":"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","sourcesContent":["import classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nconst Checkout = (props) => {\n  const confirmHandler = (event) => {\n    event.preventDefault();\n    console.log('submitted!')\n\n    if (!formIsValid) {\n      return\n    }\n\n    console.log('form is valid!')\n    // http request to firebase\n    props.onCancel();\n  }\n\n  const isValidValue = value => value.trim() !== '';\n\n  const {\n    value: nameValue,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput(isValidValue)\n\n  const {\n    value: addressValue,\n    hasError: addressHasError,\n    isValid: addressIsValid,\n    valueChangeHandler: addressChangeHandler,\n    inputBlurHandler: addressBlurHandler,\n  } = useInput(isValidValue)\n\n  const {\n    value: cityValue,\n    hasError: cityHasError,\n    isValid: cityIsValid,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler,\n  } = useInput(isValidValue)\n\n  const {\n    value: postcodeValue,\n    hasError: postcodeHasError,\n    isValid: postcodeIsValid,\n    valueChangeHandler: postcodeChangeHandler,\n    inputBlurHandler: postcodeBlurHandler,\n  } = useInput(isValidValue)\n\n  //write a custom input to check validation\n\n  // form is valid\n  let formIsValid = false;\n\n  if (nameIsValid && addressIsValid && cityIsValid && postcodeIsValid) {\n    formIsValid = true;\n  }\n  // submit form handler\n\n  const nameInputClass = nameHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const addressInputClass = addressHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const cityInputClass = cityHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const postcodeInputClass = postcodeHasError ? `${classes.control} ${classes.invalid}` : classes.control\n\n  return (\n    <form onSubmit={confirmHandler}>\n      <div className={nameInputClass}>\n        <label htmlFor=\"name\">Name</label>\n        <input \n          type=\"text\" \n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={nameValue}\n        />\n        {nameHasError && <p className={classes.invalidMessage}>must have a name</p>}\n      </div>\n      <div className={addressInputClass}>\n        <label htmlFor=\"address\">Address</label>\n        <input \n          type=\"text\" \n          id=\"address\"\n          onChange={addressChangeHandler}\n          onBlur={addressBlurHandler}\n          value={addressValue}\n        />\n        {addressHasError && <p className={classes.invalidMessage}>must have a valid city</p>}\n      </div>\n      <div className={cityInputClass}>\n        <label htmlFor=\"city\">City</label>\n        <input \n          type=\"text\" \n          id=\"city\" \n          onChange={cityChangeHandler}\n          onBlur={cityBlurHandler}\n          value={cityValue}\n        />\n        {cityHasError && <p className={classes.invalidMessage}>must have a valid city</p>}\n\n      </div>\n      <div className={postcodeInputClass}>\n        <label htmlFor=\"postcode\">Post Code</label>\n        <input \n          type=\"text\" \n          id=\"postcode\" \n          onChange={postcodeChangeHandler}\n          onBlur={postcodeBlurHandler}\n          value={postcodeValue}\n        />\n        {postcodeHasError && <p className={classes.invalidMessage}>must have a valid city</p>}\n      </div>\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n        <button className={classes.submit} type=\"submit\" disabled={!formIsValid}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}