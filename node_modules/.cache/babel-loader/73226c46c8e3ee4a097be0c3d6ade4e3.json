{"ast":null,"code":"var _jsxFileName = \"/Users/beet/code/udemy/food-order-app/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    console.log(event);\n\n    if (!formIsValid) {\n      return;\n    } // http request to firebase\n\n  };\n\n  const isValidValue = value => value.trim() !== '';\n\n  const {\n    value: nameValue,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput(isValidValue);\n  const {\n    value: addressValue,\n    hasError: addressHasError,\n    isValid: addressIsValid,\n    valueChangeHandler: addressChangeHandler,\n    inputBlurHandler: addressBlurHandler,\n    reset: restAddress\n  } = useInput(isValidValue);\n  const {\n    value: cityValue,\n    hasError: cityHasError,\n    isValid: cityIsValid,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler,\n    reset: restCity\n  } = useInput(isValidValue);\n  const {\n    value: postcodeValue,\n    hasError: postcodeHasError,\n    isValid: postcodeIsValid,\n    valueChangeHandler: postcodeChangeHandler,\n    inputBlurHandler: postcodeBlurHandler,\n    reset: restpostcode\n  } = useInput(isValidValue); //write a custom input to check validation\n  // form is valid\n\n  let formIsValid = false;\n\n  if (nameIsValid && addressIsValid && cityIsValid && postcodeIsValid) {\n    formIsValid = true;\n  } // submit form handler\n\n\n  const nameInputClass = nameHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const addressInputClass = addressHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const cityInputClass = cityHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  const postcodeInputClass = postcodeHasError ? `${classes.control} ${classes.invalid}` : classes.control;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: nameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.invalidMessage,\n        children: \"must have a name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: addressInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postcodeInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postcode\",\n        children: \"Post Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        type: \"submit\",\n        disabled: !nameIsValid,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"dKmmTiAfT4WaXk0FE+bY/rnkKdA=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/beet/code/udemy/food-order-app/src/components/Cart/Checkout.js"],"names":["classes","useInput","Checkout","props","confirmHandler","event","preventDefault","console","log","formIsValid","isValidValue","value","trim","nameValue","hasError","nameHasError","isValid","nameIsValid","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetName","addressValue","addressHasError","addressIsValid","addressChangeHandler","addressBlurHandler","restAddress","cityValue","cityHasError","cityIsValid","cityChangeHandler","cityBlurHandler","restCity","postcodeValue","postcodeHasError","postcodeIsValid","postcodeChangeHandler","postcodeBlurHandler","restpostcode","nameInputClass","control","invalid","addressInputClass","cityInputClass","postcodeInputClass","invalidMessage","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nconst Checkout = (props) => {\n  const confirmHandler = (event) => {\n    event.preventDefault();\n    console.log(event);\n\n    if (!formIsValid) {\n      return\n    }\n\n    // http request to firebase\n\n  }\n\n  const isValidValue = value => value.trim() !== '';\n\n  const {\n    value: nameValue,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput(isValidValue)\n\n  const {\n    value: addressValue,\n    hasError: addressHasError,\n    isValid: addressIsValid,\n    valueChangeHandler: addressChangeHandler,\n    inputBlurHandler: addressBlurHandler,\n    reset: restAddress\n  } = useInput(isValidValue)\n\n  const {\n    value: cityValue,\n    hasError: cityHasError,\n    isValid: cityIsValid,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler,\n    reset: restCity\n  } = useInput(isValidValue)\n\n  const {\n    value: postcodeValue,\n    hasError: postcodeHasError,\n    isValid: postcodeIsValid,\n    valueChangeHandler: postcodeChangeHandler,\n    inputBlurHandler: postcodeBlurHandler,\n    reset: restpostcode\n  } = useInput(isValidValue)\n\n  //write a custom input to check validation\n\n  // form is valid\n  let formIsValid = false;\n\n  if (nameIsValid && addressIsValid && cityIsValid && postcodeIsValid) {\n    formIsValid = true;\n  }\n  // submit form handler\n\n  const nameInputClass = nameHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const addressInputClass = addressHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const cityInputClass = cityHasError ? `${classes.control} ${classes.invalid}` : classes.control\n  const postcodeInputClass = postcodeHasError ? `${classes.control} ${classes.invalid}` : classes.control\n\n  return (\n    <form onSubmit={confirmHandler}>\n      <div className={nameInputClass}>\n        <label htmlFor=\"name\">Name</label>\n        <input \n          type=\"text\" \n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={nameValue}\n        />\n        {nameHasError && <p className={classes.invalidMessage}>must have a name</p>}\n      </div>\n      <div className={addressInputClass}>\n        <label htmlFor=\"address\">Address</label>\n        <input type=\"text\" id=\"address\" />\n      </div>\n      <div className={cityInputClass}>\n        <label htmlFor=\"city\">City</label>\n        <input type=\"text\" id=\"city\" />\n      </div>\n      <div className={postcodeInputClass}>\n        <label htmlFor=\"postcode\">Post Code</label>\n        <input type=\"text\" id=\"postcode\" />\n      </div>\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n        <button className={classes.submit} type=\"submit\" disabled={!nameIsValid}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}